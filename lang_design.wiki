= 编程语言设计 =


[[cee_design|设计C语言]]

[[from_0_to_n-1|为什么0<=i<N]]

[[lang_history|程序语言历史]]

[[compiler|编译器设计]]

[[design_program|程序设计]]

----
== 不同语言的值传递,引用传递方法 ==

java是值传递的.

这点和C是完全一致的.就是在函数内部对于形参的修改,是不会影响到实参的.

但是C,通过指针作为参数进行传递.可以在一定程度上绕过这一点.(也就是传递指针,指针作为形参始终不变,但是指针所指向的内容,会发生改变.)

对于C++语言,其引入了引用传递.这样的好处,就是可以避免了指针的hack方法的同时,还可以享受类似的好处.
C++默认采用值传递,如果在函数的声明与实现中,形参使用&修饰,则使用引用传递.

类似的,对于Java而言,始终是值传递的,但是不具有指针这样的可以hack的东西.

对于Java而言,数据结构内部的值,是可以发生改变的.因为数据结构本身(也就是其首地址,是始终不变的).

事实上,java为了安全性,去除了C++中类似的引用彻底的特性.

对于pascal语言,则同时存在两种传递方式.默认采用的为值传递,如果增加var作为形参的修饰附,则使用引用传递.

ref:http://swinbrain.ict.swin.edu.au/wiki/Pass_by_Value_vs._Pass_by_Reference

----
= 元编程 =
元编程的概念,就是利用语言来编译/解释语言/构造程序,从而避免人直接进行编码工作.很多计算机编程中都有类似的概念出现,但是不同的表达能力是完全不同的.

下面列举一些实例:

* lisp的宏
lisp的宏,其实是一种元编程的方法,通过宏达到代码替换等目的.

* python的元编程和装饰器
这部分请参考[[python]].
但是python以清晰明了为上,因此其实并不推崇元编程这种相对魔幻的方法.

* C++的模板
C++的模板方法,表达能力不强.

缺点在于:
# 只能在编译期进行模板替换功能.
# 只能针对不同数据类型进行模板编程

但是C++的模板作用也是很明显的.C++的STL规范,是非常优美的实现.值得深入去学习的.

* Ruby的DSL能力
这个只是耳闻,没有深入研究.RoR的patch方法,也是很好的.

总结,元编程是一种很强大的能力,但是必须要精通哦.

----
这里有一个很有意思的编程语言的谱系图.

[[http://exploringdata.github.io/vis/programming-languages-influence-network/]]
