= C的标准输入输出 =
`有的人认为,C的输入输出是非常简单的事情.其实它远远不是的,下面各点为您展开.`

== 输入scanf高级应用 ==
`scanf比正则表达式,肯定是弱很多啦,但是还是可以发挥一些简单作用的.`

=== 输入抑制 ===
scanf("%*d");

这里的*为输入抑制符,也就是要求输入一个整数,但是不进行赋值操作.

`显然,如果你有些输入不想得到,那么输入抑制就是你想要得到的东西;)`

=== 限定输入字符类型 ===
%[a-z] 匹配到a-z的任意字符(贪心)

%[aB'],匹配"a","B","'",中任何一个,贪心

%[^a],匹配非a的任意字符,贪心.

%[^ ],匹配非空字符.

{a|b|c},表示a,b,c中任选一个.

=== 读取宽度 ===
%WIDTHs,则读取宽度为WIDTH的字符串.
== 缓冲IO与非缓冲IO ==

标准IO

数据->流缓冲区->内核缓冲区->磁盘/外设

无缓冲IO

数据->内核缓冲区->磁盘/外设

因为标准IO不依赖与内核,因此作为C标准,而无缓冲IO则因为与内核相关,只有在*NIX系统中存在.

标准IO,一般提供缓冲就是减少直接调用read/write的次数.以提高效率.

一般缓冲方式有

# 全缓存 填满缓冲区才会发生IO操作,一般磁盘文件为此类型
# 行缓存 stdin/stdout为这种方式
# 无缓冲 stderr为此方式


glibc的FILE指针的实现方式

struct _IO_FILE{
	int _flags;
#define _IO_file_flags _flags
	char* _IO_read_ptr;		
	char* _IO_read_end;	
	char* _IO_read_base;
	char* _IO_write_base;
	char* _IO_write_ptr;
	char* _IO_write_end;
	char* _IO_buf_base;
	char* _IO_buf_end;

	char* _IO_save_base;
	char* _IO_backup_base;
	char* _IO_save_end;
	struct _IO_marker* _markers;
	struct _IO_FILE* _chain;
	int _fileno;
};


全缓冲

== 终端颜色输出 ==

printf输出带颜色字体

printf("\033[1;33m Hello World. \033[0m \n");

颜色如下:
{{{
none         = "\033[0m"
black        = "\033[0;30m"
dark_gray    = "\033[1;30m"
blue         = "\033[0;34m"
light_blue   = "\033[1;34m"
green        = "\033[0;32m"
light_green -= "\033[1;32m"
cyan         = "\033[0;36m"
light_cyan   = "\033[1;36m"
red          = "\033[0;31m"
light_red    = "\033[1;31m"
purple       = "\033[0;35m"
light_purple = "\033[1;35m"
brown        = "\033[0;33m"
yellow       = "\033[1;33m"
light_gray   = "\033[0;37m"
white        = "\033[1;37m"
字背景颜色范围: 40--49                   字颜色: 30--39 
            40: 黑                          30: 黑
        41: 红                          31: 红
        42: 绿                          32: 绿
        43: 黄                          33: 黄
        44: 蓝                          34: 蓝
        45: 紫                          35: 紫
        46: 深绿                        36: 深绿
        47: 白色                        37: 白色 
ANSI控制码:
QUOTE:
   \033[0m   关闭所有属性   
\033[1m   设置高亮度   
\03[4m   下划线   
\033[5m   闪烁   
\033[7m   反显   
\033[8m   消隐   
\033[30m   --   \033[37m   设置前景色   
\033[40m   --   \033[47m   设置背景色   
\033[nA   光标上移n行   
\03[nB   光标下移n行   
\033[nC   光标右移n行   
\033[nD   光标左移n行   
\033[y;xH设置光标位置   
\033[2J   清屏   
\033[K   清除从光标到行尾的内容   
\033[s   保存光标位置   
\033[u   恢复光标位置   
\033[?25l   隐藏光标   
\33[?25h   显示光标
}}}
