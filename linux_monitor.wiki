= linux 系统监控 =

性能优化实际是在不同参数之间的一种平衡.一般涉及下面几个部分:

# CPU
# Memory
# disk IO
# Network

任何一个参数的高负载,引起其他子系统出现问题.总之就是避免短板.
例如:

# 大量的page 交换,引起内存阻塞.
# 网卡的大吞吐量,引起CPU开销.
# CPU开销造成内存请求队列
# 大量从内存来的磁盘写请求,造成CPU和IO通道的开销.

系统一般分为两大类:
* IO为主
`我们的系统一般以此类为主`
高负荷的使用内存与下层存储系统,以及网络.数据库应用也归为此类.
* CPU为主
一般大量web服务器,邮件服务器等都属于此类.

== 全功能监控工具 ==
== CPU监控工具 ==

负载::
正在执行的线程个数与队列中的线程个数之和.

CPU使用::
* 用户时间  CPU在用户空间执行线程时间百分比
* 内核时间  CPU执行内核线程和处理中断花费时间比例
* IO等待    CPU空闲,线程阻塞等待IO请求完成话费时间比例.
* 空闲      CPU完全空闲时间比例.

=== check cpu freq ===
`/sys/devices/system/cpu/cpu[NUM]/cpufreq/cpuinfo_cur_freq`

=== vmstat ===
vmstat命令可以得到进程内存,内存分页,阻塞IO,traps,CPU活动信息.

简单模式,统计过于时间单位内的性能情况.包括内存,交换区,IO,系统,CPU等信息.

字段解释
| 大类   | 字段  | 意义                                    |
| procs  | r     | 运行队列的线程个数                      |
|        | b     | 阻塞状态,等待IO请求结束的进程个数       |
| memory | swpd  | 正在使用的虚拟内存大小                  |
|        | free  | 当前应用可用的物理内存大小              |
|        | buff  | 物理内存缓存做read/write的操作大小      |
|        | cache | 物理内存映射到进程地址空间的大小        |
| swap   | si    | 数据从swap写回RAM的大小                 |
|        | so    | 数据从RAM到swap的大小                   |
| io     | bi    | 磁盘块从文件系统或swap换入RAM的数目     |
|        | bo    | 磁盘从RAM患处到文件系统或swap设备的数目 |
| systme | in    | 正在被处理的中断个数                    |
|        | cs    | 系统正在发生的上下文切换次数            |
| cpu    | us    | 用户空间CPU使用比例                     |
|        | sy    | 内核和中断CPU使用比例                   |
|        | id    | 完全空闲比例                            |
|        | wa    | 等待IO的进程CPU使用比例                 |

=== mpstat ===
多核处理的监控

`mpstat -P ALL 1`
== 用户监控工具 ==
== IO监控 ==
* MPF: Major Page Fault
* MnPF: Minor Page Fault

通过/usr/bin/time -v命令可以看到`注意,不是默认的time命令`.

磁盘采用了MnPF的机制,也就是会将数据缓存在内存当中,从而加快程序的再次启动速度.当然,也会引起误解(linux这么消耗内存)

=== iostat ===

- -x    扩展模式

其他使用方式与XXstat是同类型的命令方式.分别为运行时间间隔,与运行次数.


== 网络监控工具 ==

=== ethtool ===
检查以太网卡的状态.

=== iptraf ===
网络实时工具

=== netperf ===
网速测定工具

=== iperf ===
类似的网速测量工具
=== nload ===
=== tcptrace ===
对指定连接的TCP详细信息.
== 监控系统软件 ==
这方面的软件也有很多.(不一一列举),这些工具一般使用RRDTool和MRTG(Multi Router Traffic Grapher),生成漂亮的图形和存储数据.

----
== 自主开发 ==
shell脚本定时抓取被监控Linux服务器上的信息.curl POST到监控机的PHP接口程序上,由PHP接口程序对信息进行分析.如果存在异常,则发送报警邮件给管理员.

== w ==
显示用户登录信息

== uptime ==
系统运行时间,用户登录个数,过去的平均负载情况.

== ps ==
显示进程个数.

== pmap ==

== pidstat ==

== free ==
显示内存情况
这里的-m参数,是按照MB来显示

== meminfo ==
cat /proc/meminfo

== iostat ==
CPU平均负载,硬盘活动情况.

== sar ==
搜集,报告,存储系统活动信息.


== mpstat ==
显示多处理器使用率

== pmap ==
进程的内存占用情况

== netstat ss ==

== dstat ==

== lsof ==
show file descrpitor

== jstat/jmap/jstack/jps ==

== tcpdump ==
网络流量分析

== wireshark ==
== tshark ==
== ngrep ==

== strace ==
系统调用

trace system calls and signals

`strace ./a.out`

then it will show syscall in stderr.

== /proc ==
各种内核信息

== glances ==
show system status

== Cacti ==
网络图形化解决方案.

== KSysguard ==

== Gnome System Monitor ==

== YaST ==

== nmon ==

== collectl ==
用于收集系统性能和提供各种存储方式来存储不同值的机制.

== nagios ==
服务器与网络监控
[[nagios]]

== Ganglia ==
高性能计算下的分布式监控系统
[[ganglia]]

== NetXMS ==

== Conky ==

== GlassBox ==
自动故障排除和监控的应用程序

== OpenNMS ==

== Pandora FMS ==

== OSSIM ==

== Monitorix ==

== JavaMelody ==
