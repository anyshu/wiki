= common lisp =
2014-01-04 21:57:39

defun用于定义函数

defparameter 定义一个全局变量

defconstant 定义一个全局常量

== IO ==
princ 输出字符

terpri 意义为terminate print newline 输出一个空格
=== 转义字符 ===
这部分主要是说明common lisp中的format函数的转义字符。

format的第一个参数可以是T，或者NIL或者一个输出流，字符串指针，
T是标准输出*standard-output*的缩写。

所有的转义字符序列都是~开始。

- ~A 输出字符串
- ~D 输出十进制整数
- ~X 输出十六进制整数

- ~%	回车
format t "~A" 要输出的内容

t这里为缺省输出的地方,默认就是stdout

- ~(.. ~)
输出为小写字符串

- ~&
使得输出以新行开始

=== 输入 ===
(read)阻塞住,输入任意一个东西,并且作为返回值返回.

== 赋值 ==
setf

== 多表达式归一 ==
progn (在scheme中使用的是begin)

这里的多表达式归一的意思，就是直接执行后面的多个表达式，当作一个表达式的效果。

之所以lisp中特别出现这个关键词，是因为lisp中表达式非常紧凑，一般情况下单个嵌套表达式就有了很强大的表达性。

这种需要多个表达式的场合反而比较少见的缘故。

多个表达式依次执行，这个也更符合过程式语言的使用方法

== 循环 ==
# do (VARNAME INITIAL UPDATE)

(do ((i start (+ i 1)))
	...)
	
# dolist ((VARNAME LIST)) 对于列表,依次展开为var

# dotimes

(dotimes (i n) 表达式。。)

== 特殊符号 ==
quote '
function #

例如 #'+ 表示的就是加法函数

== 类型 ==
typep 判定一个变量的类型

(typep 27 'integer)

atom 检查是否为符号

== 模块与多文件 ==
(load FILENAME)

== 列表 ==
注意是零索引

- nth 获取第n个元素
- nthcdr 获取第n以及之后的元素

== 逻辑 ==
zerop 检查是否为0
== 高阶函数 ==
mapcar 对于列表中的每个元素应用函数
maplist		对于列表中每部分的cdr,映射到函数

对树的操作,也就是对car,cdr的内容同时做递归操作,因此称之为双重递归.
; (map [result-type] [function] [seq])
