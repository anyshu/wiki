= 中间间技术原理与应用 =
%title 中间间技术原理与应用
mtime: 2012-10-16 [[10:10:47]]
----
== ch1 ==
已读,跳过
== ch2 面向对象中间件 ODP ==
本身 OOP 的好处.

=== OOP 概念 ===
# object
# class
# inheritance
# encapsulation
# abstract
# polymorphism

待细读.

== ch3 COM相关技术 ==
== ch4 J2EE技术 ==
== ch5 CORBA ==
特性
- 静态方法与动态方法调用
{{{
这是个很有趣的性质,因为静态定义,方便了检查,动态调用则拥有较大的弹性,但是如何平衡是关键
}}}
[[http://zh.wikipedia.org/wiki/%E6%8E%A5%E5%8F%A3%E6%8F%8F%E8%BF%B0%E8%AF%AD%E8%A8%80|IDL 接口描述语言]]

=== 6.5 负载均衡 ===

== ch10 反射中间件 ==
*反射*

研究的对象感知自己,自行推理和作用与自身的一种能力,是设计对象的一种技术.

反射的概念的提出,与一般的黑箱的封装理念由一定程序的不同.

封装,认为实现细节对用户进行屏蔽,提高了代码的可用性,但是一般情况下,隐藏实现细节,将意味着提应用决定所有的实现策略.

而应用又有可能包含了决定策略的主要信息.这样彻底的封装就会增加了复杂度.
{{{
	但是尽管如此,我们也可以看到,首先是要封装.
	如果做不对,绝对的屏蔽,则可以考虑开放结构的反射.

	实际上,尽管是封装,也不是绝对的,底层和上层一般都有接口,接口传递的信息流,就是上层应用提供的信息.
	如果,应用包含决定策略的主要信息,那么最大的可能反而是封装的结构划分设计存在问题.
	而不是考虑开放结构反射.

	如果在上述问题排除的基础上,可以考虑反射
}}}

开放是反射的基础.

反射是系统的一种推理 reason about 和作用于 act upon 自身的能力.

{{{
	但是,尽管封装可以做到屏蔽的效果,但是显然,
	为了最小化信息流,这样就会造成上下两层之间,会由一定的重复工作(信息流的压缩与解压缩过程),
	导致效率的降低.

	我期望理解反射之后,会帮助我解决这个问题.
}}}

== ch12 web服务 ==
web 服务体系的优点是:允许不同平台上,不同语言编写的各种程序以基于标准的方式相互通信.

缺陷:

- 安全性
- 消息传递/路由,可靠性/质量服务和事务处理
- 可管理性
- 性能
- 互操作性


DONE.
mtime: 2012-10-18 13:01:35
{{{
这本书本书是清华的教材,介绍的很多内容过于宽泛.仅仅作为了解信息吧.
}}}
