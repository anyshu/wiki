= 数据结构 =
%toc
TODO:
- red-black tree
== stack/queue ==
- aviod shrink
double size when full, halve size when one-quarter full

== map ==
map,又可以成为字典.

但是其内部的实现,却又可以完全不同的.

一般有下面几种方式:

- hashmap
- treemap
C++ STL中的map就是如此实现的.利用的是算法结构红黑树.
== ringbuffer ==
环形缓冲区

ringbuffer,可以利用求余运算,得到下一个缓冲空间的位置.`求余运算,看上去简便,其实也没有什么快捷和高明的地方`

# 可以有效的利用数组实现,而不是链表.这是缓存友好的.
# 可以预先分配内存,从而避免垃圾回收与内存管理.
# 删除节点,不需要进行内存清理操作.

显然ringbuffer对于多个用户同时读取是非常适用的.也可以用于单生产者,单消费者的情况.总之,这是一个队列.


== 无锁队列 ==

ref:[[http://coolshell.cn/articles/8239.html]]

无锁数据结构的关键在于CAS运算::Compare & Set, Compare & Swap.

_如果目标地址之为旧值,则令目标地址为新值.并且返回旧值_
_如果目标地址为旧值,则令目标为新值,并且返回真,否则返回假_

CAS的关键之处,在于它是CPU的一个运算指令,而不是OS层面的锁(其实行为和锁还是类似的).
这样就决定着二者截然不同的性能.

对应在x86平台的汇编运算为CMPXCHG汇编指令.于此类似的指令还有

# Fetch And Add,对于变量+1的原子操作.
# Test And Set,写入数据到某个内存位置,并传回旧值.汇编BST
# Test and Test-and-Set,用来降低TAS的资源争夺情况.

=== gcc CAS ===
{{{
    bool __sync_bool_compare_and_swap (type* ptr,type oldval,type newval);
    type __sync_val_compare_and_swap (type* ptr,type oldval,type newval);
}}}

=== 实现无锁队列 ===
{{{
EnQueue(x){
    q = new record();
    q->value = x;
    q->next = NULL;
    do{
        p=tail;
    }while(CAS(p->next,NULL,q) != TRUE);
    // 反复尝试直到可以在队列尾添加q成功.
    CAS(tail,p,q);// 如果尾部为p(尾部没有发生变化),则将尾部设置为q
    // 如果尾部不是p(也就是其他线程可能已经设置了尾部,则就不需要将尾部设置为q了
    // 另外一个解释    
    // 如果某线程获取了第一次的CAS操作,则其他节点的CAS获取都会失败,而进行循环不断重新尝试.
    // 直到本线程工作完毕,其他线程才可能获取CAS.
}
}}}

如果T1线程CAS更新了tail指针之后,线程停止或者挂掉,则其他线程都无法进入CAS.这时候就发生`死锁`了.

{{{
EnQueue(x){
    ...
    p=tail;
    oldp = p;
    do{
        while(p->next != NULL)
            p = p->next;
    }while( CAS(p->next, NULL, q) != TRUE);
    CAS(tail,oldp,q);
}
}}}


=== 评价 ===
可以看到无锁队列,其实是锁定在这个内存地址上.因此该内存地址,只可以有一个用处.就是用于多线程的获取.不可以有其他的修改方式.

CAS作为指令操作,而不是像锁,需要进行一次上下文切换.但是处理器保持原子性,处理器还是要锁住指令流水线.内存越界的检查也是要进行的.

因此速度会提升不少,但也不是绝对的.

== skiplist ==

简单,高效,动态,随机化搜索结构.ref:I2Algo

1989,Pugh提出该数据结构.

和单向链表类似,不同之处在于,存在一些前向的指针,以加快遍历过程.

这种方式,可以代替平衡树算法.平衡树算法需要进行旋转操作,而skiplist则不需要.

节点的层数, ~~可以按照节点的序号来,也可以~~ 随机确定.

=== 特性 ===
理论上skiplist的复杂度不必平衡树好,可以说skiplist是没有必要的.

但是skiplist结构比较简单那.

----
=== 从链表构建过程 ===
# 给定链表
# 从表中以1/2概率选择,或者依次选择元素,组成上一级链表.
# 为上一级链表,添加指针域,用于在同一层内进行链表.
# 重复上面的步骤,直到概率选择的指针域为空.

=== 搜索 ===
略.

=== 插入 ===
`原始的跳表,有着过多的重复节点,这些节点同时分布在上下多个层次上`

插入,根据概率,决定插入节点所处的等级.

插入的时候,需要重新平衡.尽量不要修改原有节点的等级,因为这导致数据结构不是 *稳定* 的.

这里的`根据概率`是这个数据结构的精髓,不然它不过是二叉树的一个变形而已.


=== 删除 ===
删除操作,没有复杂的地方.略.

=== 复杂度分析 ===

下面的分析是固定二分之,但是层次数发生变化的时候.

对于单向链表,从开始访问需要sum(0~(k-1))=n(n-1)/2个距离.平均为n/2距离.

而对于2层次的skiplist,则需要次数为 k/2(偶数), (k+1)/2(k为奇数),则从开始访问,需要平均距离为 (2n+1)/4.

对于i层次,则需要为(k+0)/i,(k+1)/i,...,(k+i-1)/i,这样平均需要 k/i + i(i-1)/2 .

对于单向链表,从任意点开始到另一任意点的访问距离,大概约为(n-1)n(n+1)/3个距离.

...

经过上面分析,skiplist节省的距离与层次数成反比.

如果不限制skiplist的层次个数,则复杂度为与平衡树一样为O(logN).

`上面的分析是错误的`

----
对于固定2层跳表,则所需要的时间为L1+L2/L1(也就是第一层长度+第二层每个小段的长度).明显,对于总长度(L2=N)的情况下,这个函数的最优值为2*sqrt(N),当L1=sqrt(N).

当固定3层时候,为3*cbrt(N).

当固定k层,则为k*pow(N,1/k).

最优的k值,是多少呢?当k=log2(N),时候, log2(N)*pow(N,1/log2(N)) = log2(N)*pow(pow(2,log2(N)),1/log2(N)) = log2(N)*pow(2,log2(N)*1/log2(N)) = log2(N)*2.

`指数,乘法元算的结合律,类似与乘法,加法的结合律`


----
WHP(With High Probility).高概率(1- 1/n^alpah)的O(logN).

----

应用:
leveldb
== ziplist ==
直接在字节级别的双向列表实现.节省空间.增加和删除元素都是O(1)的.但是每次增加/删除元素需要重新分配内存,因此实际时间复杂度是和列表大小相关的.

_利用特殊的编码方式,减少对于链表节点占用长度,这个数据的存储字节数,从而起到zip的作用_

_google好像对此有类似的工作,应该比这个方式要高._

主要应用在小列表和排序列表上.

一般的双向链表,存储一个向前指针,一个向后指针,默认为8个字节(32位系统)

typedef struct zlentry{
    //上个链表结点长度,上个链表节点程度的字节个数
    // 加上这个是为了双向访问.
    unsigned int  prevrawlensize,prevrawlen; 
    unsigned int  lensize,len;               //当前链表节点占用长度,当前链表节点专用长度的字节数
    unsigned int  headersize;                //当前链表节点的头部大小
    unsigned char encoding;                  //当前链表节点长度(len)的编码类型
    unsigned char *p;   // 当前节点起始位置的指针
}zlentry;

zlbytes | zltail | zllen | entry | entry | zlend

| zlbytes | 4字节的无符号整数,存储整个ziplist的字节数                                                      |
| zltail  | 4字节的无符号整数,存储最后一个节点的偏移值(也就是链表开头地址+zltail就是最后一个节点的起始地址 |
| zllen   | 2字节的无符号整数,存储链表的节点个数(当大于65535时候,则需要遍历整个链表来获取个数              |
| entry   | 链表节点,具体见上面的结构                                                                      |
| zlend   | 结尾符,0xff                                                                                    |

ref:[[http://blog.nosqlfan.com/html/3919.html]]

=== 原理 ===
在字节上存读整数,而且不同大小范围的整数采用不同的长度存储方式,来减小小数的空间使用.

应用:
redis.

= 树形结构 =
== 自平衡二叉查找树 ==
=== SBT 节点大小平衡树 ===
Size Balanced Tree.一种自平衡二叉查找树.

中国广东中山纪念中学,陈启峰发明.相比其他自平衡二叉查找树,其易于实现.

由于SBT保持平衡的是size域,因此可以实现动态顺序统计中的select和rank操作.

性质:
* 每棵子树大小不小于其兄弟的子树大小.

旋转(略)

保持性质,maintain.

插入或者删除一个结点,SBT的大小发生变化,这种变化可能导致性质破坏.这时候需要maintain操作.

Maintain(T),修复以T为根的SBT.调用Maintain(T)的前提条件是T的子树都是SBT了
`这是一个深度优先遍历所有子树的递归过程`

TODO:
算法过程与实现

=== 红黑树 ===
