= Python Unix,Linux system administrator =
mtime:2012-10-10 20:52:49 
----
== ch1 ==
一门优秀的编程语言,必须适合于使用它的主人.

# 易于学习
# 可以处理简单与复杂任务
# 代码简化,易于维护,可读性好.
# 基于"词",较少依赖于特殊字符
{{{
	commit:
	这点是个比较有意思的观点,之前并没有看到类似的说法.
	确实如此,因为对人类而言,易于处理和维护的显然是具有明显意义的"词",而不是具有不明显意思的符号.比如在C中大括号,用于作为语句段的分割符号,这个必须有相关经验的人,才可以"自然而然"的接受.
	而python中字符则少了许多.
	C	Python 
	{}	回车/换行
	;	回车/换行
	,	不需要
	''	''/""
	""	''/""(这里二者的通用也是个很棒的设计)
	逻辑操作符号	逻辑词汇
	上面这个变化带来的好处,主要有两点:
	1,理解方便,快速学习,
	2,快速修改,避免"神奇"的效果,或者类似于"魔法"的特性
	当然,如果了解lisp语言,会发现.lisp的syntax结构更为简单,只有(),但是这样又是一个过于简化的结构.对于人的可读性也就很差了.
	而对比如perl,则有各种各样的符号.对于bash,特殊的空格,会让一个新手不得不小心翼翼.
}}}
# OOP支持
{{{
	commit:
	OOP范式本身存在一定的问题,就是对于并发支持存在一定的问题.
	但是这个是可以避免的.避免类的成员函数,修改自身的属性值就可以避免这个问题.
	
	在实际的环境中,OOP是个普遍的思想.对于问题的理解和实现都有很方便的抽象结构,这是非常好的.
}}}
# 社区与丰富的库的支持
{{{
	commit:
	这点对于一个编程语言的推广还是有着非常重大的意义,因为人们不可能通过语言为机器的每个具体动作指定方法,随着软件结构的复杂性增长,软件结构的复用就有十分重要的意义.
	而库的出现,就是在函数/过程/方法->类->模块->库的抽象层次上发展出来的.
	因此有着丰富的库,意味着程序开发不需要自己一切从头开始,在大量的实践基础上,程序开发难度将始终控制在可控范围内.
	同时大量的库,也意味着丰富的检验和测试,大量的文档,技术资料,这个对于实际学习使用都提供了极大的便利.
	
	python著名的"内置电池"就是指python的标准库,可以看到python的标准库的意义就像C++的STL一样.
	
	python的第三方的包的获取与安装也是极其简便的,例如easy_install/pip都是非常易用的工具,简直和apt-get一样具有超级牛力.
}}}

----
{{{class="brush: python"
subprocess.call([cmdname,cmdarg],shell=True)
}}}
----

== ch2 IPython ==
skip

== ch3 text ==
字符串操作
{{{
	commit:
	关于字符串的具体操作,可以参考python中的标准文档,这里不进行无意义的重复.
}}}

page 91 todo

skip to chapter 6

== ch6 数据 ==
P182~...


== ch11 == 
=== curses 创建 Apache 日志浏览器 ===


