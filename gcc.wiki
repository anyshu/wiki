
= rarely std =
== multi-char const ==
using for init a INT var with multi-char,such as:

int v = 'ab';

this will cause a warning.

instead of this:

int v = '\x61\x62';

this compiles without warning, but warning when get '-pedantic'.

=== using as enum ===
when use as enum, will clearly and short code.
{{{
switch (tag) {
    case 'TAG1':...;
    case 'TAG2':...;
}
}}}
but this is so tricky, really not recommend to use this feature.
=== using as meta info ===
in mp4 box type, this will easily encode as
`int fytp = 'fytp';`
=== problems ===
# endian-ness
# incomplete multi-char and padding
different compiler will impl different style.

so not portable.
= extend =
struct init, as . style.
== stack protector ==
- -fstack-protector         only for func using char array
- -fstack-protector-all     for all func
- -fno-stack-protector

== others ==
* -v                        verbose output for parameter details

= gcc =
== option ==
* m32,m64                   spec for 32bit or 64bit code
* -E                        preprocess only
* -e/--entry _ENTRY_        self define entry function
* -o                        output filename

=== warning of option ===
- -Wall
- -Werror

=== debug option ===
- -g

=== link option ===
- -lLIBNAME

==== short-enum ====
 It means that enums are just as big as they need to be, depending on the
 range of enumeration values. So short enums can be anything from 8 to 32 bits
 in size (maybe even 64 bits?) -- there's no way to know without knowing how
 the enum was defined.

 Check compiling result:
{{{
readelf -a [ELF file] | grep enum
}}}
== 使用ccache加速 ==
使用ccache gcc或者ccache g++,可以复用缓存的文件,这样加快编译速度.

相比与一般的文件,仅仅保存为.o文件,而这个可以暂存头文件的编译结果,等等.

同时可以使用ccache将缓存文件定位到tmpfs中,这样加快编译速度,而且不消耗硬盘.

== distcc ==
- run it only need under normal user, not root.
- on server, run `distccd --daemon --allow 10.0.0.0/8`
- export *DISTCC_HOST*="_IP_ ..." to ENV, and wrap toolchain with distcc, will
run it background automatically.

== warning ==
=== strict-aliasing ===
gcc 从2到3引进的

这一特性,不允许一个内存地址表示为两种指针,如果非要如此做,可以通过union实现.

这样的目的,是为了代码优化.可以使用-Wno-stict-aliasing来去除这个警告(实际仍会采用这个优化)

== cicular dependency ==
- --start-group
- --end-group

== extension ==
ref: [[https://gcc.gnu.org/onlinedocs/gcc/C-Extensions.html]]
