= multithreding is hard =

翻译自:http://www.virtualdub.org/blog/pivot/entry.php?id=62

多线程的困难

一般使用多线程来增加程序的性能,但是最着CPU时钟速度增长减慢,硬件开始通过增加芯片个数和CPU架构演化为多核设计,这样程序也会造成更多的bug.

当SMP和超线程CPU出现的时候,就由类似的情况.程度,部分驱动可能运行在不同的逻辑线程上.

*有效的多线程变得困难.*

我提到这个想法是开发视频filter系统的时候,为了利用多线程的好处.我发现这是个艰难的任务,花费的时间也比我事先想象的要长.多线程需要新的思维,相比于单线程编程.

*如何不去并行化*

死锁问题


----

= 使用线程的优点 =
# 减少内存占用
# 使用互斥量进行全局数据访问,不需要使用更为复杂的技术.
# 创建线程时间较短(fork需要复制堆)
# 线程进行切换的时候,内核调度花费时间较小.

= 使用线程的缺点 =
# 编程错误代价高(如果有问题,则整个程序崩溃)
# 容易发生编程错误(因为很多代码都不是线程安全的)
# 线程服务的同步问题.
# 互斥量竞争问题,需要避免.
# 单个进程的内存空间为4GB,也就是无法有效利用更大的内存空间.
# 线程的堆栈空间浪费问题.

= 使用分支进程优点 =
# 编程错误不致命.
# 编程错误发生错误,不需要考虑线程安全.
# 不会发生线程同步的偶发错误.
# 地址空间可以用完.

= 缺点 =
# 内存利用不够好(需要复制内存的程序段,堆栈等信息)
# 数据共享复杂.
# 创建进程开销较为复杂.(虽然有copy-on-write技术)
# 上下文切换较为耗时.

= 总结 =
多线程模型比多进程模型好用.

但是为了充分利用机器的内存,可以开启少量进程,但是不推荐主要开启进程为了服务.

不管是线程还是进程,同步,共享数据都比较麻烦,应该将其最小化.

== 互斥量 ==
最好最一组数据,建立一个互斥量.
