= The Linux Kernel =
Ref:
- [[http://www.tldp.org/LDP/tlk/tlk-toc.html|The Linux Kernel]]
- [[http://www.makelinux.net/books/lkd2/?u=ch03lev1sec1|Linux Kernel Development 2]]

== Process ==
=== task_struct ===
The kernel store process info in circluar doubly linked list called the
`task list`. each element is one `task_struct`, which define in
`<linux/sched.h>`. It have fd of opening files, process's address space,
    pending siganl, process's state and more.

== IPC: Interprocess Communication Mechanisms ==
inter-process communication

shared between process
- file
- memory-mapped file
- socket
low performance, it have to copy twice data
- SHM(shared memory)
avoid copy, fast, but have to sync between process.

Process interactive with external
- signal (alarm, SIG_KILL)
not for pass message or data, but for ISR of process
- pipe (`|` in shell)
- named pipe (`mkfifo` in shell)
`pipe` use one page memory, so may cannot cache too much data.
- semaphore (sem_init, sem_post, ...)
- message queue
This need twice copy message, this need more CPU, so not for frequent and big
data communication.
- message passing

[[Binder]]
=== signal ===
| SIGSTOP | make process to halt its execution | kill -STOP pid |
| SIGKILL | make proces to exit                | kill pid       |
These two cannot ignore or block.

Other signal can handle by process self, or default handler by kernel.

The number of supported signals is limit to the word size of the processor. In
32bit processors, it only can have 32 singals. so we only have 30+ singal in
general.

This info store at `signal` filed of `task_struct` of every process.
block info store as mask at `blocked` filed. pending siganls are kept in
`siganl` field. It remains until it is unblocked.

Info about how each process handle every possible signal, this is held in an
array of `sigaction` struct pointed at by `task_struct`.

- address of a routine that will handle signal
- a flag which tells linux that ignore the signal or let kernel handle it.

| SIGTSTP | suspend process | user's 'Ctrl-Z' | may ignore |
==== Send signal ====
setting bit in `task_struct`'s `signal` field will gemerated signal.

- Only kernel and super user can send signal to every other pcoess.
- Normal processes can only send signal to processes with same `uid` and `gid`
or processes in same group.

if the process has not blocked the signal, and is waiting but interruptible,
   then it is woken up by changing its state to `running` and makeing sure
   that it is in the run queue. That way the scheduler will consider it a
   candicate for running when the system next schedules.

When handle the signal::

signal are not presendted to the process immediately the are generated, they
must wait until the process is running again.


| signal | meaning             | deafult handler    |
| SIGFPE | float pointer error | core dump and exit |

==== functions ====
- `void signal(int sig, void (*handler)(int))`
register a routine/handler for specific signal

==== issues ====
- original, signal is oneshot. when kernel get registered handler, then reset
it back to DFT handler if signal have ONESHOT flag. This flag is default
setting.

in glibc, this is removing. That mean, defaut not have this setting.

- original, signal not setting block, when have a running hanler, it was
interrupted, and call again.

in linux, it will auto block current handling signal, so handler won't be
interrupted.

- original, signal will interrupt system calling.

in glibc, it won't.
== sync ==
|           | thread/process | func                     | local       |
| semaphore | all            | post, wait               | any         |
| mutex     | all            | lock, unlock             | thread self |
| rwlock    | thread         | wrlock, rdlock, unlock   | self        |
| cond var  | thread         | broadcast,  signal, wait | 1v1 / 1vall |
