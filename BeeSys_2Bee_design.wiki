= 2Bee子系统设计 =
2012-09-20

== 功能说明 ==
之前开发的BeeSys整体过于复杂,并且使用rpc导致程序间的依赖较高(rpcServer与rpcClient很多地方必须一致才可以).
这里考虑到实际使用,对于简单的1个src,一个dst节点的情况,应该有较为简单的实现方案.
* rsync
	这里的好处是直接脚本完成.(文件夹的同步).
	但是如果文件较多的时候,将会引起反复计算hash值的情况.这样会带来性能上的大问题.
` 该方案直接使用rsync命令即可.`
* 自己编写脚本.
	这个是本文档的主要内容.具体见后.

----

== 设计说明 ==
设计方案
重要设计点:
* 暂无

次要设计点:
# 使用python标准的logging模块,而不是自己简单手动的log模块.
# 使用daemon线程,这样允许无错退出.
# 使用sftp传输,这样可以支持续传.
# 使用任务队列,单个时间段仅仅有一个传输任务.

不必要的:
# 使用文件系统监控的方法,而不是定周期检测.这样减少消耗.(但也是非常有必要)
# 配置文件,直接采用外部python文件的方式.*注意这里不再采用简单的label+空格分割的方式*.
	这样减少了不必要的配置文件解析工作.而且作为脚本的简单修改复杂度并不够,完全可以接受.

== 流程说明 ==
* 取出配置文件,初始化.

	* 利用文件夹监控,对于新建文件,则将该任务加入任务队列中.
	* 任务线程,检测到队列中有任务,则开始传输文件.如果没有则静默.
	
* 两个线程的沟通点,在于任务队列,二者共享.一个写入,一个取出.典型的生产-消费问题.

== todolist ==
 * [X] 配置文件
 * [X] 监控文件夹线程,加入到队列
 * [X] 任务线程
 * [X] 添加日志系统,去掉键盘中断的错误

----

== 测试情况 ==
 * [X] linuX环境下,本地文件复制测试
TD/OUT:
 * [X] linuX环境,远程文件复制测试
mtime: 2012-10-11 16:07:58 
完成
 * [X] win环境测试
mtime: 2012-10-11 16:07:37
完成,在cygwin下运行正常.

----

== 依赖关系 ==
总结依赖标准库,自定义的common中的ft和log模块,sftp库

== 安装 ==
参考*依赖关系*的说明,安装需要使用BeeSys/common,BeeSys/2Bee.同时python环境与sftp库.

== 配置与运行 ==
配置:
	修改文件conf.py,意思还是较为明显的.修改即可.
运行:
{{{
	./2Bee.py
}}}

== 总结 ==
这个程序完成与2012-09-20上午,整个过程大约不到2个小时,从设计文档到最终说明

== 后续问题 ==
之后的问题:
# sftp这个库的使用还是存在问题,现在修改为直接适应scp
#
