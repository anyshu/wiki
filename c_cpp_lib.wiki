=C/C++库=
mtime:2012-09-24 20:08:19 

- libmemcached
	高性能,分布式的内存对象缓存系统.

- glib
gtk+,gnome的基础底层核心程序库,设计C语言常用数据结构,相关的处理函数,实用的宏.可移植的封装和例如事件循环,线程,动态调用,对象系统等API.可以在*NIX系统运行,windows,OS2等操作系统上运行.

具体介绍参见:[[http://www.ibm.com/developerworks/cn/linux/l-glib/index.html]]

== C标准库 ==
[[c_io|C的IO函数]]


== 测试框架 ==
最近开始趋向于TDD编程,也算是尽可能向工业方向去靠拢,仅仅靠自己手动去写函数,总不是一个良性的方法.

我现在在实际当中,为了兼容性,大部分情况下还是适应C/C++,因此这里就考虑C++的测试框架.

实际上因为C++没有反射机制,测试框架不能够动态获取的类的方法,这样就使得测试代码写起来比较麻烦,很多时候必须手动注册测试函数.

== 日志库 ==
日志是最多的,也是最便于复用的库.

简单而小巧的日志系统,mylog就够了.

但是对于一个大型系统,一个讲究性能的系统.日志的同步输出,也是一个瓶颈.

因为它是同步的.

事实上来讲,同步点这种方式可能更好.

也就是大家可以异步输出,但是相互之间只要不发生交错就可以了.

这部分SICP也有论述.

log4j2,apache的日志模块,不错.

== xml类库 ==
tinyxml

小型的xml解析库,缺点就是没有方便的路径解析.

在oc项目中使用.

== openmp ==
openmp是并行编程库,广泛用于高性能计算等领域.

使用宏,就可以自定义一定的行为.

例如:

#pragma omp parallel for

放在for循环之前,就可以自动展开for循环,作为多线程程序运转.

编译的过程添加-fopenmp作为选项(gcc)

这样就可以自动展开为多线程/多进程程序执行.

注意:
这个for循环中,不要使用!=作为for循环结束的逻辑判断,而是要使用<,<=,>,>=.

因为并行的执行过程可能是乱序的.

使用!=判断的话,会提示编译错误,"无法进行预测"

ref:http://www.ibm.com/developerworks/cn/aix/library/au-aix-openmp-framework/
