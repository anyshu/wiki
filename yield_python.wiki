= python的yield特性 =
ref:http://www.ibm.com/developerworks/cn/opensource/os-cn-python-yield/

----

上面的那个例子,讲的特别好.建议作为yield特性的入门学习.

下面总结一下:

* 通过yield可以编写一个生成器(表面还是一个函数).

* 这个函数通过实例化,是一个可以迭代的对象.
* 迭代对象,可以通过循环或者f.next()方式进行迭代.
* 迭代对象之间互补影响

* 迭代对象运行完毕,或者函数return,则返回stopIteration异常.

可以看到这里的函数已经起到一个闭包的作用.自身存储状态在函数/生成器内.

python的yield实例:

- 文件打开时候的readlines(),这里就是通过生成器实现的.显然不是一次将所有的文件都读取完毕的.
- xrange(n),范围生成函数这里也是的.(对比range()是直接返回所有的数,组成的列表)
- 排列组合中的itertools.permulations()和combinations().这里也是通过迭代运算,生成器计算的.不然很多场景根本存储不了.
- gevent中通过yield进行协程之间的调度.(因为yield之后会返回)[[python_lib|python的库]]

----

在C语言中,也可以通过函数层面的static变量,在函数内部存储信息,从而达到生成器的效果.

但是C语言没有函数对象或者函数状态的概念.因此只能维持一个运行时状态,并且不可以重新得到生成器.
因为C语言中,静态变量只存在于静态存储区.而python中,则可以支持这点.
----
对于Scheme中,call/cc也可以支持yield.但是理解和实现上都比较复杂.

----
利用延时求值特性,其实也可以进行类似的东西.


