= date type =
[[python_type]]
= string =
- title         easily captial string
- capwords      more right than `title`
- ljust
- rjust
== string ==
== StringIO ==
if you want same style output to string, or file, like cin/cout in C++.
try this library.

{{{
# out = sys.stderr
out = cStringIO.StringIO()
print >> out, "abc"
out.close()
s = out.getvalue()
}}}

== readline ==
import readline

提供输入的readline支持.向上则得到上一次输入,左右移动光标,等等

== re ==

=== sample ===
==== spliting strings on any of multiple delimiters ====
{{{
>>> line = 'word0 word1; word2, word3'
>>> re.split(r'[;,\s]\s*', line)
['word0', 'word1', 'word2', 'word3']
}}}

== difflib ==
- get_close_matches(word, possibilities[, n][, cutoff])
we could implement smart tip as fuzzy match

- context_diff(a, b[, fromfile][, tofile][, tofiledate][, n][, lineterm])
generate diff file between A string list and B. with fromfile name and tofile
name.

- ndiff(a, b[, linejunk][, charjunk])
generate diff string, and indicate where different.

- restore(sequence, which)
which get from original string A or B, from diff class.

- unified_diff(a, b[, fromfile][, tofile]...)
generate unified diff format

= data persistence =
== pickle ==
pickle 用于python的数据序列化工作

注意,这里是file,而不是文件名,因此必须先打开文件,然后才可以调用
{{{
pickle.dump(obj,file)
pickle.load(file)
}}}

== cPickle ==

= numeric and math =
== functools ==
* reduce

=== wraps ===

== itertools ==
无穷迭代器

* count,计数迭代器
* repeat,重复计算器
* cycle,循环计数器

最短输入序列终止的迭代器
* chain 多个列表序列
* compress 数据,选择器,其中选择器为一个布尔序列
* dropwhile,生成序列,从预测函数成功
* groupby,分组,序列+分组函数
NOTE:
groupby need first *sorted* it.
* ifilter
* ifilterfalse,按照谓词函数进行判定序列
* islice
* imap
* starmap
* tee
* takewhile,生成序列,直到预测函数失败
* izip

组合生成器
提供了组合数学上需要的工具,比如组合,排列等.

* 组合方法
itertools.combinations()

* 排列方法
itertools.permutations()

== math ==
factorial,阶乘

== random ==
- randint(from, to) 两个都是闭区间
- random()    生成(0,1)随机数
- shuffle(seq)  随机排列

= file and dir access =
== os.path ==
- isfile        check file existence

- expanduser    expand to home directory
=== filename processing ===
- dirname   get dirname
- basename  get basename
- split     split dirname and basename
- splitext  split filename to dirname+name and file ext
NOTE:
{{{
>>> splitext('/a/b.c')
('/a/b', '.c')
>>> splitext('.c')
('.c', '')
}}}

=== logic ===
- exists    is exist
=== broswring file ===
- walk      triple tuple -> path, dirname, fnames

== open file ==
Just post wrong solution: use readlines() or read(), both they load entire file
content to memory.

Just use
{{{
with open("log.txt") as infile:
for line in infile:
    do_something_with(line)
}}}

is great!
= Python Runtime Service =
== inspect ==
Inspect live objects

runtime get type

- getargspec(_func_)
get the names and default values of a Python function's arguments.

= network service =
== HTTPSimpleServer ==
python -m *SimpleHTTPServer*

开启当前文件目录为HTTP服务器,端口号为8000

NOTE:
~~NOT supported by python3~~
under python3, this moudle rename to *http.server*

== CGIHTTPServer ==
python -m CGIHTTPServer

开启完整的webserver

= generic OS service =
== sys ==
- exit
- stdin/stdout/stderr

== os ==
== time ==
== argparse ==
{{{
    parser = argparse.ArgumentParser()
    parser.add_argument('', type=)
}}}

=== add_argument ===
* short opt
* long opt
* type
    - str
    - int
* action
    * store_true
* default
* nargs
    * +: 1 or more
    * *: any var
* help

=== argcomplete ===
support arg auto completion for argparse interface

== logging ==
NOTE:
logging is a shared module, so when using default blank logging NAME, all
logging of other module, will appear in *SAME* log.

indicate logging NAME, to avoid other module's log.

= optional OS service =
== threading ==

= IPC & network =
== subprocess ==
推荐使用subprocess方法.它替代了Popen,spawn,system等方法.
=== subprocess ===
==== call ====
call(args)

运行程序,args描述.等待命令完成,返回returncode.
==== check_call ====
check_call(args)

运行程序args.运行带程序结束.
如果返回值,不是0的话,抛出CalledProcessError异常,该异常携带返回值作为属性.

==== check_output ====
运行程序,并且返回输出作为字符串.

如果返回值不是0,则抛出异常.如上.

==== Popen ====
开子进程的方法

- p=subprocess.Popen(cmd)
- p.poll()检查子进程是否结束,设置并返回return值.
- p.wait()等待子进程结束,设置并返回return值.
- communicate(),与进程交互,发送数据到标准输入.读取数据从stdout,stderr,直到受到eof.
- send_signal发送信号.
- terminate()终止进程,发送SIGTERM或者调用TerminateProcess()
- kill()kill进程,发送SIGKILL.

在linux上使用的是exevcp,在Windows上使用的是CreateProcess.

`可以使用shlex.split()来对命令进行分割.`

NOTE:
os.popen deprecated. NOT use it.
== socket ==

= Internal Data Handling =
== email ==
== json ==

= importing modules =
NOTE:
when your script is *symlink*, in which case, the first entry of *sys.path*
will be the directory which the directory containing the _target_ of the
symlink.
