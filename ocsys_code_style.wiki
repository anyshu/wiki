= readme =
auth: liuyang1
mtime: 2013-04-08 22:07:39 
----

= 代码风格约定 =
== 变量 ==
# 全局变量
    # 全局变量以"g_"+"模块名_"+原变量名
    # 全局变量应该是针对整个代码周期的,而不是要反复或者经常创建/销毁的.
# 请尽量避免使用全局变量。
    # 对于需要在一个函数内部，可以使用static变量.
    # 对于一个模块内,可以将变量放到.c/.cpp文件中,而不是.h文件,这样就不会将变量名污染到全局空间去.
    # 如果该模块的模块级别变量较多,可以组织到一个struct中间.而在各个函数之间作为变量传递就可以了.
    # 准确来说,就是精确定义你需要的变量生存区域,并且尽可能限制到最小.
    # 事实上来讲,不仅如上,还要将变量的定义处,与使用处尽可能放到一起.
    # 比如在一个循环的开始之前定义一个循环变量,要好过在本函数开始处定义这个变量.
    # 若是一个变量在循环内部的话并且变量是结构体或者类,则可以考虑到将其定义到循环之外,以避免反复创建/销毁变量.
# 一般变量命名
    # 务必使用一个看上去非常直观的名字,而不是一个简短的名字,更不能是一个无意义的名字.
    # 简短而有意义明确的名字,似乎就只有i,j,k了.
    # 也不要随意使用缩写
    # 事实上,利用变量名自动补全,长的名字不会增加人的负担.但是调试的时侯,就非常有用了.
    # 变量名小写
== 函数 ==
# 函数命名方式
    # 动作类    :   小写的单词+动作对像,如parseHeader
    # 非动作类,则使用单词的首字母大写拼接在一起.比如MyFunction
# 参数顺序
    # 一般请以下面的顺序:模块级别的全局变量结构体,输入参数/源数据/源信息,输出参数/目标数据/结果信息,关于整个过程的一些参数信息
    # 比如:memcpy(dest,src,len)
    # 不是必须实现,但尽量作到简明,一眼就可以明白
== 头文件 ==
# 头文件必须有宏保护,就是如#ifndef _A_H #define _A_H #endif这样的东西.
# 头文件包含顺序
    # C头文件 C++头文件 外部第三方库头文件 本项目头文件 本模块头文件
== 宏 ==
# 尽量使用枚举,内联函数,常量代替.如果这些你都不明了,那么还是使用宏.
# 因为宏的作用范围类似与全局变量,请参考全局变量的命名规则.就是项目名+模块名+变量名的格式
# 如果知道如何使用内联函数,那么就不要用宏实现一样的功能.
# 一般不要尝试编写复杂的宏"函数"作为程序的技巧,除非你特别熟悉,并且准备付出代价
# 宏使用全大写命名(这个大家都知道),使用_作为连接,比如OCSYS_DC_DEFAULT_VALUE
== 整型 ==
# 一般而言,都使用整型int
# 对于长度,使用unsigned int.
# 一般长度信息,通过sizeof(变量名)获得,如果可以如此,就不要定义一个宏,更不要使用一个常量或者数字.也不要通过sizeof(变量类型)获得.
== 注释 ==
# 凡是不能一眼看明白的,都要加上注释
# 对于代码中巧妙的,隐晦的,重要的更要加上注释
# 如果你不想在一年之后,被人追问,你这句代码是什么意思,那么就现在添加注释
# 标识注释
# 如果还有后续开发工作,注释 "TO DO"
# 如果存在问题,代码需要修改,注释XXX
# 如果有bug,需要后期修改,注释BUG,并且详细说明是什么一个BUG,在什么情况下可以复现出来,目前的调试状态到什么情况
== 编码 ==
# 使用UTF8编码,并且在linux环境下,也就是行的结尾为\n,而不是\r\n(Win),也不是\r(Mac)
# 使用空格缩进,tab缩进4个字符宽度.(空格缩进可以不是必须,但是4个字符宽度是必须的)
== 仅对于C++ ==
# 尽可能不使用智能指针
== 其他 ==
# 更多,请参考谷歌C++代码风格文档中文版[[http://zh-google-styleguide.readthedocs.org/en/latest/google-cpp-styleguide/]]
# 可以使用tool/cpplint.py进行代码风格检查,该工具来自与google,对我们的并不是完全覆盖,有些也不是完全一致,这个工具的使用大家自觉吧.
