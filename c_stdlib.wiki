== file operation ==
=== fopen ===
FILE *fopen(const char *filename, const char *mode);

mode with "r/w/a/t+"

when running with POSIX, using 't' mode, fopen() will fail with a msg indicate
a non-valid mode was specified.

* at+       append, and if not exist, will create

=== fdopen ===
=== freopen ===

`FILE *freopen(const char *path, const char *mode, FILE *stream)`

close `stream` (if exist), then open the file with mode, associate the stream
pointed to by stream with it.

=== remove ===
`int remove(const char *pathname)`

if the name was the last link to a file, but any processes still have the file
open, the file will remain in existence until the last file descriptor
referring to it is closed.

=== fgets ===
- Ctrl-D return EOF

== memory ==
=== malloc ===
=== free ===
=== calloc ===
`void *calloc(size_t nmemb, size_t size);`

Allocate memory for an array of NMEMB elements of SIZE bytes each, and return
a pointer to the allocated memory.

This function will do exter `memset` after allocation.

=== realloc ===
用于改变指针指向的存储空间的大小。从开始位置到min（new size， old size）之间的内容得以保持不变。

存储区域扩张的画，新增内存空间是未初始化的。

如果参数ptr是NULL，那么等同于malloc的效果。

如果参数size是0，而ptr不是NULL，那么等同于free的效果。

=== alloca ===
allocate buffer in stack, so not need `free`, but may overflow in `stack`.

=== trouble shooting ===
{{{
Crashes in memory related function are almost always related to heap
corruption, such as overflowing an allocated chunk, or freeing the same
pointer twice.
}}}

If realloc size is not alignment, it may return error when `free`.

Error message: invalid next size

- dangling pointer
- free twice
- allocate pointer which is not allocated from heap

== ctype.h ==
- isalnum
- isalpha
- isascii
- isblank
- iscntrl
- isdigit
- isgraph
- islower
- isprint
- ispunct
- isspace
- isupper
- isxdigit

- tolower
- toupper

== string.h ==
- strcat, strncat
- strcpy, strncpy
- strchr
- strrchr
- strchrnul

- strspn
- strcspn
search a string for a set of bytes

`size_t strcspn(const char *s, const char *reject);`

return length of head of S which consist entirely of bytes not in reject.

- strtok
- strtok_r

`char *strtok(char *str, const char *delim);`
`char *strtok_r(char *str, const char *delim, char **saveptr);`

`strtok` function break a string into a sequence of zeor or more nonempty
tokens.
    # first call `strtok` the string to be parsed be specified in STR.
    # Then want parse on same string, STR must be NULL

=== strip newline ===
- `s[strcspn(s, "\r\n") = '\0';`
strip newline and other content after newline.

- `strtok(s, "\n");`
split S with "\n" delimiter, so it will strip newline and other content after
newline.

=== string to number ===
string to dobule, float, long double
- strtod
- strtof
- strtold

|                                           | function name              | comment |
|-------------------------------------------|----------------------------|---------|
| scan memory for char                      | memchr, memrchr, rawmemchr | opt     |
| index char in string                      | index, rindex              |         |
| locate char in string                     | strchr, strrchr, strchrnul |         |
| search a string for any of a set of bytes | strpbrk                    |         |
| extract token from string                 | strsep                     |         |
| get length of a prefix substring          | strspn, strcspn            |         |
| locate a substring                        | strstr                     |         |

== stdint ==

have `int32_t` and other types definition.

== stdbool ==
bool exists in the current C - C99, but not in C89/90.

In C99 the native type is actually called _Bool, while bool is a standard library macro defined in stdbool.h (which expectedly resolves to _Bool).
Objects of type _Bool hold either 0 or 1, while true and false are also macros from stdbool.h.

== string ==
- strdup, strdupn, strdupa, strndupa
copy a string, must free or nothing(if use `alloca`)

== assert ==
`assert` function

deifne `NDEBUG` to do in release build

== limits.h ==
- LLONG_MAX, LLONG_MIN, ULLONG_MAX

== unistd.h ==

| function      | comment                          |
| pread, pwrite | read or write fd at given offset |
