= shell编程 =
mtime: 2012-10-09 16:53:54 

----
basename,dirname

获取路径和文件名,从文件的路径全名中.

----
cygpath

路径转换,从cygwin路径,到windows路径.

cygpath -w filepath

----
cut

cut -s -d '.' -f2

从标准输入,以点进行分割,获取第2部分.

cut -s -d '.' -f1-2

获取第1~2部分

*可以用于提取文件名的前缀*

----
""/''

!!! 这是一个不容易注意的一个小细节.

shell&perl中对于""中等内容,进行变量替换.

但是对于''中内容,则直接赋值,不会进行变量替换工作.

因此在一般情况下,使用最可能的是"".

== 逻辑判断 ==
shell中逻辑判断,若是相等,则直接为=,*不是==*

[ "abc" = "abcd" ] && echo yes || echo no

== 命令参数的提取 ==
- $1,$2表示第一个,第2个参数.
- $#,表示参数的个数
- $$ 本程序的PID
- $! 上一个命令的PID
- $? 上一个命令或者函数的返回值

== 字符串操作 ==
- ${#string}        string的长度
- ${string:pos}     string从pos位置之后的内容
- ${string:pos:len} string从pos开始,len长度
- ${string#substr}  从string开始,删除最短匹配substr的子串
- ${string##substr} 从string开始,删除最长匹配substr的子串
- ${string%substr}  从string结尾,删除最短匹配substr的子串
- ${string%%substr} 从string结尾,删除最长匹配substr的子串
- ${string/sub/rep} 使用rep替代第一个sub
- ${string//sub/rep}    使用rep替代所有的sub
- ${string/#sub/rep}    使用string前缀匹配sub,那么就用rep,替代所有的sub
- ${string/%sub/rep}    使用string后缀匹配sub,那么就有rep,替代所有的sub
== 循环 ==
{{{
for f in ./*.pdf;do
	echo $f
done
}}}

== 检查命令存在与否 ==
一个可能的场景,是一个命令可能有多个.例如make/colormake之类,那么需要检查其中的命令是否存在,从而尽可能选择更合适的命令.

那么可以通过两种方法检查

例如:
{{{
nudate() {
    if hash gdate 2>/dev/null; then
        gdate "$@"
    else
        date "$@"
    fi
}
}}}

第二种是利用command -v CMDNAME
或者 type CMDNAME

在bash中,type和hash是内置的.前者主要检查命令,后者主要检查内置命令以及关键词.

对于POSIX脚本,则使用command -v这种方式
ref::[[http://stackoverflow.com/questions/592620/how-to-check-if-a-program-exists-from-a-bash-script]]

== 逻辑 ==
{{{
    if [ $# -eq 1]
    then
        PROGRAM_NAME=$1
    else
        echo "usage"
        exit
    fi
}}}

== 函数 ==
{{{
FUNCNAME() {
    FUNCBODY
}

# call func
FUNCNAME
}}}
注意::
函数名称后面,不要添加小括号.这样会引起shell子进程

== 文件存在性判定 ==
- -b 文件存在且为块特殊文件
- -c 文件存在且为字符特殊文件
- -d 文件存在且为路径
- -e 文件存在(无视类型)
- -f 文件存在且为常规文件
- -g 文件存在,并且设置了组ID标志
- -h 文件存在,并且为软连接
- -k 文件存在,并且stickly bit设置了
- -n string 字符串长度不是0
- -p 文件若是命名管道
- -r 文件存在,并且可读
- -s 文件存在,并且大小不是0
- -t file_descriptor 文件的文件描述符是打开的,并且关联到终端
- -u 文件存在,并且设置了用户ID标志
- -w 文件存在,并且可写
- -x 文件存在,并且可执行
- -z string 字符串长度为0
- -L 文件存在,并且是软连接
- -O 文件存在,并且所有者是当前进程的所有者
- -G 文件存在,并且所有者是当前进程所有者所在的组
- -S 文件存在,并且是socket
- file1 -nt file2 文件1,2存在,并且file1比file2新
- file1 -ot file2 文件1,2存在,并且file1比file2旧
- file1 -ef file2 文件1,2存在,并且指向相同的文件
- string 如果字符串不是非空字符串
- s1 = s2 如果字符串s1,2是identical
- s1 != s2 如果字符串s1,s2不是identical
- s1 < s2 字典序比较
- s1 > s2 字典序比较
- n1 -eq n2 整数比较
- n1 -ne n2
- n1 -gt n2
- n1 -ge n2
- n1 -lt n2
- n1 -le n2
- !expression
- expr1 -a expr2 AND
- expr1 -o expr2 OR
- (expr)    等同与expr
- -a的优先级比-o高

== 循环 ==
{{{
for i in $.jpg; do
    echo $i;
done
}}}
