= 我为什么选择erlang =
许式伟

参考:面对软件错误构建可靠的分布式系统.TODO:

并行,分布式趋势

软件发展趋势(软件-->>服务)

erlang:并行&分布(就像gc解决了内存管理问题,erlang解决了并行处理的问题)

对象:
- 高并发
- 分布式
- 持续服务
- 热升级
- 可靠

erlang:
- 进程隔离
- 消息传递
- let it crash
	# 杜绝防御式编程,使得程序从错误检测中逃离出来.
	# 督程的方法,来重启进程
	# 持久存储,保持进程崩溃,程序可以从中恢复出来(热升级应该也是采用了类似的机制)
- 无共享
	解决并发的同步问题
- 消息传递
	无共享的基础上进行消息传递,来作为进程直接传递数据的方式

	自然是天然异步的.

	原子化消息,消息传递有序,消息不包含指针.
- 位置透明
	不区分位置,只有PID(进程号)

其他问题
- 无数组
- 非OOP
	- 无成员变量(不可变,函数式),因此与OOP冲突.
- 适应多线程编程
- 函数式编程,

不足
- 性能
- 代码管理(命名空间之类)
