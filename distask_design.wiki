= distask 设计文档 =
2013-12-20 21:18:38

这是一个分布式的任务系统.目前设计主要用于视频的转码.

一般系统特性:
* 后台自动更新部署
* 完全分布式的任务系统,各个节点之间相互没有任何依赖性.
* 任务的发布,具有任意节点特性.只要该分布式系统中存活一个节点,即可以成功发布任务.
* 后台自动更新配置文件,配置文件可以以组管理.
* 自动汇总系统信息,与任务状态信息.
* 高容错性设计,考虑各种任务的故障中断.
* 提供一个前端页面,监控状态

转码系统特性:
* 下载,转码,上传过程完全异步.以最大化效率.

== 层次与模块 ==
组播网络通信,完全异步的方式
心跳
BEAT

任务层面
ADD,PEND,DONE,ERROR

具体任务的执行方面

== 自动更新的模块 ==
检查,下载安装,
自动重启

== 组播协议设计 ==
设计方法,还需要参考较多的分布式系统设计的资料才可以.

限制开始考虑使用最为简单的组播消息,监听,通告的方式.

这种方式,系统的设计的和ganglia有点相似.

== 任务 ==
任务分为任务模板和任务列表.作用和函数,以及函数参数一样.

例如:
{{{
transcode filename
{
	wget file
	ffmpeg file
	mp4box -hint file
	ftp put file
}
filelist:
1.mp4
2.mp4
...
}}}
DEAD
== 全分布式协议设计 ==

协议头部
地址状态对
- 地址 状态
- 地址 状态

地址由IP,port共计64bit组成.状态有SYN,ACK,TODO

=== 消息的发布 ===
由一个节点,发布消息到其目的地址列表中的随机sqrt(n)个.消息状态为syn.
自己的状态为ack
其他未发送消息的,状态为todo.
同时将消息,加入到自己的接受确认队列中.

收到消息的节点,则将自己的目的地址列表加入到列表中,状态初始化为todo.
然后将自己的状态设置为ack.
然后从todo地址中随机选择sqrt(n)个,设置状态为syn.
发送出去.
同时将消息,加入到自己的接受确认队列中.

XXX:
需要避免生日悖论的问题.
也就是说,两个节点同时对地址列表进行随机,如何保证使得二者的随机结果,尽量的不重复.

注意,这里尽量避免二者的直接协商.

可以利用TTL,计算出该节点所在消息传递序列中的层次,然后进一步的进行哈希值求余,进行分组.
然后该节点就对其相应的组发送数据.
该哈希算法,使用椒盐值,该椒盐值由最初发起消息的节点随机得到.
这样就同时保证了随机性和确定性(在一次消息发送过程中是确定的,但是每次发送是随机的)
这样同时避免了路径依赖.

是应该设计两种方式,消息的发布与收集,还是简单的只有一种方式呢?

应该是两种.因为他们的需求明显是不一样的.


== ref ==
tor

完全的匿名网络

p2p的一系列网络

ganglia是采用简单的组播的方式实现的.这种肯定是个无法简单的方法.而且够用了.
