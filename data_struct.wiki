= 数据结构 =
----
== ring buffer ==
优点:
# 不会频繁分配释放内存
# 对于先进显出的场景下,非常适合使用环形缓冲区,实际上这个是必须遵守的.
# 免锁(当只有一个读一个写的时候)

数据输入过程负责将数据加入到环形缓冲区,逻辑过程从后面读取数据,

问题:
# 必须经常判断缓冲区是否为孔,并且移动尾指针需要折行处理,因此可能效率并不高.

== 双缓冲区 ==
双缓冲的方式,就是生产者与消费者都各自负责处理自己的缓冲区.

当两个缓冲区的操作都结束(我觉得是消费者缓冲区结束,且生产者缓冲区不空的时候),则生产者与消费者缓冲区互换,从而

只有同步或者互斥的开销非常多的场合,才使用双缓冲区.

一般如果编程语言或者库提供了线程安全的缓冲区,那么双缓冲区本身不应该采用这种缓冲区.

