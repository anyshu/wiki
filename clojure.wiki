= clojure learning =

== 内嵌数据结构 ==
clojure提供了丰富的原生数据结构.有vector,map,set.
`这个特性,令我喜欢,自从用了python的一连串的数据结构之后,当然他们比C++的自然好用多了`

| vecotr | [1 2 3] [a b c] |
| map    | {:a 1 :b 2}     |
| set    | #{1 2 3}        |

clojure的数据结构,也可以混合类型嵌套.`good,同样是一个C++不支持的特性`

=== 基本操作 ===
- 添加元素到数组结尾 (conj VECTOR ELEMENT)
- 添加元素到列表开头 (conj LIST ELEMENT)
- 获取元素    (LIST INDEX) / (INDEX LIST) (MAP INDEX) / (INDEX MAP)

== 函数定义 ==
(defn FUNCNAME (fn [ARGSLIST] FUNCBODY ))

(defn FUNCNAME [ARGSLIST] FUNCBODY)

== 局部绑定 ==
(let [VAR1 VAL1 VAR2 VAL2 ...] ... )

== 不可变数据结构 ==
为了达到函数式编程的概念,(纯函数特性),则必须要支持不可变数据结构的高效性.

事实上,clojure内部采用了树来实现几乎所有的数据结构,这样在更新的时侯,原有数据很多都是直接复制就可以了.

数据是不可变的对像,高效实现很多操作.


